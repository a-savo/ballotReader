pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
stacked[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
stacked %>% replace(. == "", NA) %>% na.omit()
}
stacked
}
test <- read_twocol_summary(myurl)
test[[1]]
View(test[[1]])
View(test[[1]])
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
stacked <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
stacked[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
stacked[[i]] %>% replace(. == "", NA) %>% na.omit()
}
stacked
}
test <- read_twocol_summary(myurl)
View(test[[1]])
test[[1]][1,5]
test[[1]][5,1]
test[[1]] %>% replace(. == '', NA)
test[[1]] %>% replace(. == '', NA) %>% na.omit()
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
stacked <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
df[[i]] <- df[[i]] %>% replace(. == '', NA) %>% na.omit()
}
stacked
}
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
stacked <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
df[[i]] <- df[[i]] %>% replace(. == '', NA) %>% na.omit()
}
df
}
test <- read_twocol_summary(myurl)
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
df <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Replace empty
df[[i]] <- df[[i]] %>% replace(. == '', NA) %>% na.omit()
}
df
}
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
df <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Convert empty rows to NAs and drop them
df[[i]] <- df[[i]] %>% replace(. == '', NA) %>% na.omit()
}
df
}
test <- read_twocol_summary(myurl)
View(test[[1]])
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
df <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Convert empty rows to NAs and drop them
df[[i]] <- df[[i]] %>%
replace(. == '', NA) %>%
na.omit() %>%
separate(Voters, c("Raw Total","Percent"), " ")
}
df
}
test <- read_twocol_summary(myurl)
View(test[[1]])
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
df <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
df[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Convert empty rows to NAs and drop them
df[[i]] <- df[[i]] %>%
replace(. == '', NA) %>%
na.omit() %>%
separate(Votes, c("Raw Total","Percent"), " ")
}
df
}
test <- read_twocol_summary(myurl)
View(test[[1]])
?seperate
?separate
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
df <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
elex[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Convert empty rows to NAs and drop them
elex[[i]] <- elex[[i]] %>%
replace(. == '', NA) %>%
na.omit() %>%
# Split raw vote totals and percentages into two columns:
tidyr::separate(Votes, c("Raw Total","Percent"), " ")
}
all_elex <- as.data.frame(do.call("rbind", elex), stringsAsFactors = FALSE)
all_elex
}
test <- read_twocol_summary(myurl)
read_twocol_summary <- function(url) {
`%>%` <- magrittr::`%>%`
elex <- list()
pages <- tabulizer::extract_tables(url)
for (i in 1:length(pages)) {
# Drop whitespace columns that do not contain candidates or vote #s
columns <- apply(pages[[i]],2, function(x) any(grepl('Total|%',x)))
pages[[i]] <- pages[[i]][,columns]
# This .pdf format has two columns containing tables of returns;
# we stack the two columns on top of each other so we have one column
# for candidates and one for votes
elex[[i]] <- data.frame(Candidate = c(pages[[i]][,1],pages[[i]][,3]),
Votes = c(pages[[i]][,2],pages[[i]][,4]))
# Convert empty rows to NAs and drop them
elex[[i]] <- elex[[i]] %>%
replace(. == '', NA) %>%
na.omit() %>%
# Split raw vote totals and percentages into two columns:
tidyr::separate(Votes, c("Raw Total","Percent"), " ")
}
all_elex <- as.data.frame(do.call("rbind", elex), stringsAsFactors = FALSE)
all_elex
}
test <- read_twocol_summary(myurl)
View(test[[1]])
test
view[test]
View(test)
?extract_tables
get_page_dims(myurl)
mytest <- extract_areas(myurl)
mytest <- extract_tables(myurl, area = c(0,0,612,792))
mytest <- extract_tables(myurl, pages = 2, area = c(0,0,612,792))
mytest <- extract_tables(myurl, area = list)
mytest <- extract_tables(myurl, area = list(c(0,0,612,792)))
mytest[[2]]
View(mytest[[2]])
View(mytest[[2]])
View(mytest[[1]])
mytest <- extract_tables(myurl, area = list(c(0,400,612,792)))
View(mytest[[1]])
mytest <- extract_tables(myurl, area = list(c(0,0,792,612)))
View(mytest[[1]])
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,900,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,600,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,1200,612)))
View(mytest[[2]])
View(mytest[[1]])
mytest <- extract_tables(myurl, area = list(c(0,0,1200,612)), guess = FALSE)
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,1200,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,2000,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,700,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(0,0,600,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(200,0,792,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(100,0,792,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(80,0,792,612)))
View(mytest[[2]])
mytest <- extract_tables(myurl, area = list(c(80,0,850,612)))
View(mytest[[2]])
View(mytest[[1]])
View(mytest[[3]])
View(mytest)
mytest[[4]]
View(mytest[[4]])
View(mytest[[5]])
library(pdftools)
mytest <- pdf_text(myurl)
mytest
readlines(mytest)
read_lines(mytest)
mytest[1]
mytest[2]
read_lines(mytest)
mytest <- read_lines(mytest)
mytest[2]
mytest <- pdf_text(myurl)
mytest
read_fwf(mytest)
?read_fwf
mytest %>% read_fwf(fwf_empty(.))
View(mytest %>% read_fwf(fwf_empty(.)))
library(XML)
test <- xmlTreeParse("detail")
test <- xmlTreeParse("detail.xml")
test
test2 <- xmlToDataFrame(test)
test2 <- xmlToDataFrame("detail.xml")
test[1]
test2 <- xmlToDataFrame("detail.xml")
test2 <- xmlToDataFrame("detail_1.xml")
test2 <- xmlToDataFrame(test[1])
test2 <- xmlToDataFrame("detail.xml")
?xmlToDataFrame
test2 <- xmlToDataFrame("detail.xml", collectNames = FALSE)
root <- xmlRoot(test)
root
test2 <- xmlToDataFrame(root)
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/datainfo/data/item"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(root, "/datainfo/data/item"))
xmlToDataFrame(nodes = xmlChildren(xmlRoot(test)[["data"]]))
View(test)
View(test[doc])
View(test[[1]])
View(test$doc)
test[[1]]
root[1]
root[1:2]
root[1:5]
root$VoterTurnout
View(detaildf)
root[5]
xmlToDataFrame(root[5])
root[5][1]
xmlToDataFrame(test, nodes = "VoterTurnout")
xmlToDataFrame(test, homogenous = TRUE, nodes = "VoterTurnout")
xmlToDataFrame("detail.xml", nodes = "VoterTurnout")
xmlToDataFrame(xmlRoot("detail.xml"), nodes = "VoterTurnout")
xmlToDataFrame(nodes = xmlChildren(xmlRoot(test)[["data"]]))
write.csv
?write.csv
unzip("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip")
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip")
?download.file
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","Ossof")
temp <- tempfile()
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip",temp)
data <- read.table(unz(temp, "a1.dat"))
temp
unlink(temp)
getwd
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip",temp)
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip")
?unzip
data <- unzip("GA06.zip")
data
unzip("GA06.zip")
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip")
unzip("GA06.zip")
library(readxl)
?read_xls
?readxl_example
read_excel()
?read_excel
?excel_sheets
excel_sheets("detail.xls")
read_excel("detail.xls", sheet = 3)
read_excel("detail.xlsx", sheet = 3)
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip", mode = 'wb')
unzip("GA06.zip")
read_excel("detail.xlsx", sheet = 3)
readr::read_tsv("detail.xls")
read_excel("G:\My Drive\Y3\S2\Political Programming\github\ballotReader\NJelex\detail.xlsx", sheet = 3)
read_excel("G:/My Drive/Y3/S2/Political Programming/github/ballotReader/NJelex/detail.xlsx", sheet = 3)
read_excel("G:/My Drive/Y3/S2/Political Programming/github/ballotReader/NJelex/detail.xls", sheet = 3)
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip", mode = "wb")
unzip("GA06.zip")
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip", mode = "wb")
download.file("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip","GA06.zip", mode = "wb")
read_excel("G:/My Drive/Y3/S2/Political Programming/github/ballotReader/NJelex/detail.xls", sheet = 3)
readr::read_tsv("detail.xls")
read.xls("detail.xls")
library(gdata)
install.packages("gdata")
install.packages("gdata")
library(gdata)
read.xls("detail.xls")
library(RODBC)
odbcConnectExcel("detail.xls")
?read-tsv
?read_tsv
library(tidyverse)
?read_tsv
read.table("detail.xls")
?read.table
read.csv("detail.xls")
read.csv("detail.xls", sep = "\t")
read_excel("GA06.zip")
library(readxl)
read_excel("GA06.zip")
library(XML)
xmlToDataFrame("detail.xls")
glouc <- "http://results.enr.clarityelections.com/NJ/Gloucester/71871/191307/eb01/detailxls.zip"
download.file(glouc,"glouc.zip", mode = "wb")
glouc <- "http://results.enr.clarityelections.com/NJ/Gloucester/71871/191307/reports/detailxls.zip"
download.file(glouc,"glouc.zip", mode = "wb")
unzip("glouc.zip")
unzip("glouc.zip")
xmlToDataFrame("detail.xml")
xmlToDataFrame("detail_1.xml")
test <- xmlParse("detail.xml")
test
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/datainfo/data/item"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test))
detaildf<-xmlToDataFrame(nodes = "Contest")
detaildf<-xmlToDataFrame(test)
library(xml2)
xml2
?xml2
xml_structure(test)
xml_structure("detail.xml")
x <- "detail.xml"
xmlTree(x)
xmlTreeParse(x)
xmlTreeParse(x, useInternalNodes = TRUE)
test2 <- xmlTreeParse(x, useInternalNodes = TRUE)
xmlRoot(test2)
xmlRoot(test2)[1:5]
xmlRoot(test2)[1:2]
xmlRoot(test2)[1:4]
xmlRoot(test2)[1:5]
xmlRoot(test2)[1:6]
xmlName(test2)
root <- xmlRoot(test2)
xmlName(root)
read_xml(x)
test <- read_xml(x)
xml_find_all(pg, "\\record")
xml_find_all(test, "\\record")
xml_find_all(test, "\\Contest")
xml_find_all(test, "\\Precinct")
xml_find_all(test, "\\Precincts")
pg <- read_xml("http://www.ggobi.org/book/data/olive.xml")
pg
View(pg)
View(test)
recs <- xml_find_all(pg, "//record")
recs
xml_find_all(test, "\\VoteType")
xml_find_all(test, "\\Choice")
xml_find_all(test, "\\Contest")
xml_name(test)
xml_children(test)
library(rvest)
rvest
??rvest
install.packages("rvest")
install.packages("rvest")
library(rvest)
??rvest
library(XML)
test <- xmlParse("detail.xml")
head(test)
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/Contest/Choice/VoteType/Precinct"))
detaildf
tides = system.file("exampleData","tides.xml", package="XML")
tides.str<-xmlParse(tides)
View(tides.str)
tides.str
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType/Precinct"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/VoterTurnout"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/VoterTurnout\Precinct"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/VoterTurnout/Precinct"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/VoterTurnout/Precincts"))
detaildf
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/VoterTurnout/Precincts/Precinct"))
tides.str
test
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf
tides.str
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType/Precinct"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contestt"))
detaildf<-xmlToDataFrame(nodes = getNodeSet(test, "/ElectionResult/Contest"))
xmlRoot("detail.xml")
?xmlToDataFrame
detaildf<-xmlToDataFrame(homogeneous = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType/Precinct"))
detaildf<-xmlToDataFrame(homogeneous = False, nodes = getNodeSet(test, "/ElectionResult/Contest"))
detaildf<-xmlToDataFrame(homogeneous = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest"))
detaildf<-xmlToDataFrame(homogeneous = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType/Precinct"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf
View(detaildf)
View(detaildf)
detaildf<-xmlToDataFrame(collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(collectNames = TRUE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice/VoteType"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest/Choice"))
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult/Contest"))
detaildf
detaildf<-xmlToDataFrame(homogeneous = TRUE, collectNames = FALSE, nodes = getNodeSet(test, "/ElectionResult\"))
))))
)
/
>
end()
\\\
////
_)))
>
