range <- page_range
}
for (i in range) {
# Pull out each row of each worksheet as a string
rows <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
# Find column names
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
# Find columns with vote totals
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
# Separate out registered voters and total votes
candidate_cols_count <- cols_count - 2
# Pull out vector of cell contents
everything <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
# Pull out votes and use numger of vote cells to determine size of matrix
vote_num <- na.omit(stringr::str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
# Rebuild vote matrix from excel document
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
# Pull out the title and isolate candidates
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
# Generate candidate variable to repeat across vote types
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
# Create data.frame of results with candidate variable
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
# Gather vote totals into one column
dplyr::select(Candidate, dplyr::everything()) %>%
dplyr::rename("Vote_Type" = !!names(.[2])) %>%
tidyr::gather(3:ncol(df), key = "Locality", value = "Votes") %>%
dplyr::arrange(Candidate) %>%
# Create race column
dplyr::mutate(Race = title) %>%
dplyr::mutate(Votes = as.numeric(Votes)) %>%
dplyr::select(Race, dplyr::everything())
sheets[[(i-2)]] <- df
}
sheets
}
}
read_clarity2(url, directory = "data", filename = "data/GA06.csv")
read_clarity2(url, directory = "data/", filename = "data/GA06.csv")
read_clarity2(url, directory = "data/", filename = "data/GA06.csv")
read_clarity2(url, directory = "data/", filename = GA06.csv")
"""
read_clarity2(url, directory = "data/", filename = "GA06.csv")
url <- "https://results.enr.clarityelections.com/GA/67317/186181/reports/detailxls.zip"
read_clarity2(url, directory = "data/", filename = "GA06.xls")
read_clarity2(url, directory = "data/")
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
read_clarity2 <- function(url, directory, filename = NULL, report = NULL, tidy_detail = FALSE, page_range = NULL) {
`%>%` <- magrittr::`%>%`
# Determine if Web01, and build url if true
Web01 <- ifelse(grepl("Web01", url),TRUE,FALSE)
if (Web01 == TRUE) {
report <- switch(report,
csv = "summary.zip",
xls = "detailxls.zip",
txt = "detailtxt.zip",
xml = "detailxml.zip")
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
"/reports/", report, sep = '')
} else {
report <- str_extract(url, "[a-zA-Z]+.zip")
}
# Download and unzip report
download.file(url, paste(directory, report, sep = ''))
unzip(paste(directory, report, sep = ''), exdir = substr(directory,1,nchar(directory)-1))
unzipped <- switch(report,
summary.zip = "summary.csv",
detailxls.zip = "detail.xls",
detailtxt.zip = "detail.txt",
detailxml.zip = "detail.xml")
if (!is.null(filename)) {
file.rename(paste(directory, unzipped, sep = ''),
paste(directory, filename, sep = ''))
} else {
filename <- unzipped
}
file.remove(paste(directory, report, sep = ''))
if (tidy_detail == TRUE) {
message("This function can take a while, especially if you're importing the entire report.")
message("Please be patient!")
# Read excel doc as html file
xls <- xml2::read_html(paste(directory, filename, sep = ''))
# Total # of sheets
sheetnumber <- length(rvest::html_text(rvest::html_nodes(xls,
xpath = "//worksheet")))
sheets <- list()
# Use page_range if set by user
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
# Pull out each row of each worksheet as a string
rows <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
# Find column names
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
# Find columns with vote totals
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
# Separate out registered voters and total votes
candidate_cols_count <- cols_count - 2
# Pull out vector of cell contents
everything <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
# Pull out votes and use numger of vote cells to determine size of matrix
vote_num <- na.omit(stringr::str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
# Rebuild vote matrix from excel document
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
# Pull out the title and isolate candidates
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
# Generate candidate variable to repeat across vote types
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
# Create data.frame of results with candidate variable
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
# Gather vote totals into one column
dplyr::select(Candidate, dplyr::everything()) %>%
dplyr::rename("Vote_Type" = !!names(.[2])) %>%
tidyr::gather(3:ncol(df), key = "Locality", value = "Votes") %>%
dplyr::arrange(Candidate) %>%
# Create race column
dplyr::mutate(Race = title) %>%
dplyr::mutate(Votes = as.numeric(Votes)) %>%
dplyr::select(Race, dplyr::everything())
sheets[[(i-2)]] <- df
}
sheets
}
}
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
library(ballotReader)
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
?fill_
?fill_na
read_clarity2 <- function(url, directory, filename = NULL, report = NULL, tidy_detail = FALSE, page_range = NULL) {
`%>%` <- magrittr::`%>%`
# Determine if Web01, and build url if true
Web01 <- ifelse(grepl("Web01", url),TRUE,FALSE)
if (Web01 == TRUE) {
report <- switch(report,
csv = "summary.zip",
xls = "detailxls.zip",
txt = "detailtxt.zip",
xml = "detailxml.zip")
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
"/reports/", report, sep = '')
} else {
report <- str_extract(url, "[a-zA-Z]+.zip")
}
# Download and unzip report
download.file(url, paste(directory, report, sep = ''))
unzip(paste(directory, report, sep = ''), exdir = substr(directory,1,nchar(directory)-1))
unzipped <- switch(report,
summary.zip = "summary.csv",
detailxls.zip = "detail.xls",
detailtxt.zip = "detail.txt",
detailxml.zip = "detail.xml")
if (!is.null(filename)) {
file.rename(paste(directory, unzipped, sep = ''),
paste(directory, filename, sep = ''))
} else {
filename <- unzipped
}
file.remove(paste(directory, report, sep = ''))
if (tidy_detail == TRUE) {
message("This function can take a while, especially if you're importing the entire report.")
message("Please be patient!")
# Read excel doc as html file
xls <- xml2::read_html(paste(directory, filename, sep = ''))
# Total # of sheets
sheetnumber <- length(rvest::html_text(rvest::html_nodes(xls,
xpath = "//worksheet")))
sheets <- list()
# Use page_range if set by user
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
# Pull out each row of each worksheet as a string
rows <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
# Find column names
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
# Find columns with vote totals
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
# Separate out registered voters and total votes
candidate_cols_count <- cols_count - 2
# Pull out vector of cell contents
everything <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
# Pull out votes and use numger of vote cells to determine size of matrix
vote_num <- na.omit(stringr::str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
# Rebuild vote matrix from excel document
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
# Pull out the title and isolate candidates
title <- remaining[1]
remaining <- remaining[-1] %>%
ballotReader::fill_na() %>%
na.omit() %>%
as.character()
# Generate candidate variable to repeat across vote types
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
# Create data.frame of results with candidate variable
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
# Gather vote totals into one column
dplyr::select(Candidate, dplyr::everything()) %>%
dplyr::rename("Vote_Type" = !!names(.[2])) %>%
tidyr::gather(3:ncol(df), key = "Locality", value = "Votes") %>%
dplyr::arrange(Candidate) %>%
# Create race column
dplyr::mutate(Race = title) %>%
dplyr::mutate(Votes = as.numeric(Votes)) %>%
dplyr::select(Race, dplyr::everything())
sheets[[(i-2)]] <- df
}
sheets
}
}
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
fill_na <- function(df) {
`%>%` <- magrittr::`%>%`
df <- df %>%
replace(. == "", NA)
df
}
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
read_clarity2 <- function(url, directory, filename = NULL, report = NULL, tidy_detail = FALSE, page_range = NULL) {
`%>%` <- magrittr::`%>%`
# Determine if Web01, and build url if true
Web01 <- ifelse(grepl("Web01", url),TRUE,FALSE)
if (Web01 == TRUE) {
report <- switch(report,
csv = "summary.zip",
xls = "detailxls.zip",
txt = "detailtxt.zip",
xml = "detailxml.zip")
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
"/reports/", report, sep = '')
} else {
report <- str_extract(url, "[a-zA-Z]+.zip")
}
# Download and unzip report
download.file(url, paste(directory, report, sep = ''))
unzip(paste(directory, report, sep = ''), exdir = substr(directory,1,nchar(directory)-1))
unzipped <- switch(report,
summary.zip = "summary.csv",
detailxls.zip = "detail.xls",
detailtxt.zip = "detail.txt",
detailxml.zip = "detail.xml")
if (!is.null(filename)) {
file.rename(paste(directory, unzipped, sep = ''),
paste(directory, filename, sep = ''))
} else {
filename <- unzipped
}
file.remove(paste(directory, report, sep = ''))
if (tidy_detail == TRUE) {
message("This function can take a while, especially if you're importing the entire report.")
message("Please be patient!")
# Read excel doc as html file
xls <- xml2::read_html(paste(directory, filename, sep = ''))
# Total # of sheets
sheetnumber <- length(rvest::html_text(rvest::html_nodes(xls,
xpath = "//worksheet")))
sheets <- list()
# Use page_range if set by user
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
# Pull out each row of each worksheet as a string
rows <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
# Find column names
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
# Find columns with vote totals
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
# Separate out registered voters and total votes
candidate_cols_count <- cols_count - 2
# Pull out vector of cell contents
everything <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
# Pull out votes and use numger of vote cells to determine size of matrix
vote_num <- na.omit(stringr::str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
# Rebuild vote matrix from excel document
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
# Pull out the title and isolate candidates
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
# Generate candidate variable to repeat across vote types
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
# Create data.frame of results with candidate variable
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
# Gather vote totals into one column
dplyr::select(Candidate, dplyr::everything()) %>%
dplyr::rename("Vote_Type" = !!names(.[2])) %>%
tidyr::gather(3:ncol(df), key = "Locality", value = "Votes") %>%
dplyr::arrange(Candidate) %>%
# Create race column
dplyr::mutate(Race = title) %>%
dplyr::mutate(Votes = as.numeric(Votes)) %>%
dplyr::select(Race, dplyr::everything())
sheets[[(i-2)]] <- df
}
sheets
}
}
read_clarity2(url, directory = "data/", filename = "GA06.xls", tidy_detail = TRUE)
read_clarity2(url, directory = "data/", filename = "GA06.xls")
url <- "http://results.enr.clarityelections.com/NJ/Gloucester/71871/191307/Web01/en/summary.html"
read_clarity2(url, directory = "data/", filename = "mytest.csv", report = "csv")
read_clarity2(url, directory = "data/", filename = "mytest.xls", report = "xls")
read_clarity2(url, directory = "data/", filename = "mytest.xls", report = "xls", tidy_detail = TRUE)
read_clarity2(url, directory = "data/", filename = "mytest.xls", report = "xls", tidy_detail = TRUE, page_range = 3:5)
read_clarity_results <- function(url, directory, filename = NULL, report = NULL, tidy_detail = FALSE, page_range = NULL) {
`%>%` <- magrittr::`%>%`
# Determine if Web01, and build url if true
Web01 <- ifelse(grepl("Web01", url),TRUE,FALSE)
if (Web01 == TRUE) {
report <- switch(report,
csv = "summary.zip",
xls = "detailxls.zip",
txt = "detailtxt.zip",
xml = "detailxml.zip")
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
"/reports/", report, sep = '')
} else {
report <- str_extract(url, "[a-zA-Z]+.zip")
}
# Download and unzip report
download.file(url, paste(directory, report, sep = ''))
unzip(paste(directory, report, sep = ''), exdir = substr(directory,1,nchar(directory)-1))
unzipped <- switch(report,
summary.zip = "summary.csv",
detailxls.zip = "detail.xls",
detailtxt.zip = "detail.txt",
detailxml.zip = "detail.xml")
if (!is.null(filename)) {
file.rename(paste(directory, unzipped, sep = ''),
paste(directory, filename, sep = ''))
} else {
filename <- unzipped
}
file.remove(paste(directory, report, sep = ''))
if (tidy_detail == TRUE) {
message("This function can take a while, especially if you're importing the entire report.")
message("Please be patient!")
# Read excel doc as html file
xls <- xml2::read_html(paste(directory, filename, sep = ''))
# Total # of sheets
sheetnumber <- length(rvest::html_text(rvest::html_nodes(xls,
xpath = "//worksheet")))
sheets <- list()
# Use page_range if set by user
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
# Pull out each row of each worksheet as a string
rows <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
# Find column names
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
# Find columns with vote totals
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
# Separate out registered voters and total votes
candidate_cols_count <- cols_count - 2
# Pull out vector of cell contents
everything <- rvest::html_text(rvest::html_nodes(
xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
# Pull out votes and use numger of vote cells to determine size of matrix
vote_num <- na.omit(stringr::str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
# Rebuild vote matrix from excel document
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
# Pull out the title and isolate candidates
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
# Generate candidate variable to repeat across vote types
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
# Create data.frame of results with candidate variable
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
# Gather vote totals into one column
dplyr::select(Candidate, dplyr::everything()) %>%
dplyr::rename("Vote_Type" = !!names(.[2])) %>%
tidyr::gather(3:ncol(df), key = "Locality", value = "Votes") %>%
dplyr::arrange(Candidate) %>%
# Create race column
dplyr::mutate(Race = title) %>%
dplyr::mutate(Votes = as.numeric(Votes)) %>%
dplyr::select(Race, dplyr::everything())
sheets[[(i-2)]] <- df
}
sheets
}
}
read_clarity_results(url, directory = "data/", filename = "mytest.xls", report = "xls", tidy_detail = TRUE, page_range = 3:5)
