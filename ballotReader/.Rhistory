fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[1]] <- df
}
sheets
sheets <- list()
for (i in 3:3) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[1]] <- df
}
for (i in 3:5) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[i]] <- df
}
mytest
sheets
sheets[[1]]
sheets[[2]]
sheets[[3]]
sheets[[4]]
sheets[[5]]
sheets[[4]]
sheets[[3]]
read_clarity <- function(url, destfile, Web01 = FALSE, report = NULL, tidy_detail = FALSE, page_range = NULL) {
if (Web01 == TRUE) {
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
switch(report,
csv = "/reports/summary.zip",
xls = "/reports/detailxls.zip",
txt = "/reports/detailtxt.zip",
xml = "/reports/detailxml.zip"), sep = '')
}
download.file(url, destfile)
unzip(destfile)
if (tidy_detail == TRUE) {
xls <- read_html("detail.xls")
sheetnumber <- length(html_text(html_nodes(xls, xpath = "//worksheet")))
sheets <- list()
default <- 3:sheetnumber
for (i in 3:5) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[(i-1)]] <- df
}
sheets
}
}
read_clarity <- function(url, destfile, Web01 = FALSE, report = NULL, tidy_detail = FALSE, page_range = NULL) {
if (Web01 == TRUE) {
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
switch(report,
csv = "/reports/summary.zip",
xls = "/reports/detailxls.zip",
txt = "/reports/detailtxt.zip",
xml = "/reports/detailxml.zip"), sep = '')
}
download.file(url, destfile)
unzip(destfile)
if (tidy_detail == TRUE) {
xls <- read_html("detail.xls")
sheetnumber <- length(html_text(html_nodes(xls, xpath = "//worksheet")))
sheets <- list()
range <- ifelse(page_range == NULL,3:sheetnumber,page_range)
for (i in range) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[(i-1)]] <- df
}
sheets
}
}
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/54034/149180/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:10)
mytest
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/54034/149180/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:5)
mytest
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/54034/149180/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = c(3:5))
mytest
page_range = c(3:5)
range <- ifelse(page_range == NULL,3:sheetnumber,page_range)
range
range <- ifelse(page_range == NA,3:sheetnumber,page_range)
range
range <- ifelse(is.na(page_range),3:sheetnumber,page_range)
range
range <- ifelse(length(page_range) > 0,3:sheetnumber,page_range)
ranfe
range
page_range
length(page_range)
length(fake)
range <- ifelse(is.null(page_range),3:sheetnumber,page_range)
range
range <- ifelse(is.null(page_range),3:sheetnumber,"hi")
range
range <- ifelse(is.null(page_range),3:sheetnumber,c(page_range))
range
range <- page_range
range
ifelse(is.null(page_range),3:sheetnumber,page_range)
ifelse(is.null(page_range),3:sheetnumber,3:sheetnumber)
ifelse(is.null(page_range),3:sheetnumber,3:20)
ifelse(is.null(page_range),3:sheetnumber,c(3:20))
ifelse(is.null(page_range),c(3:sheetnumber),c(3:20))
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
range
read_clarity <- function(url, destfile, Web01 = FALSE, report = NULL, tidy_detail = FALSE, page_range = NULL) {
if (Web01 == TRUE) {
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
switch(report,
csv = "/reports/summary.zip",
xls = "/reports/detailxls.zip",
txt = "/reports/detailtxt.zip",
xml = "/reports/detailxml.zip"), sep = '')
}
download.file(url, destfile)
unzip(destfile)
if (tidy_detail == TRUE) {
xls <- read_html("detail.xls")
sheetnumber <- length(html_text(html_nodes(xls, xpath = "//worksheet")))
sheets <- list()
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[(i-1)]] <- df
}
sheets
}
}
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/54034/149180/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:5)
mytest
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/54034/149180/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:10)
mytest
View(mytest[[1]])
View(mytest[[3]])
View(mytest[[4]])
View(mytest[[5]])
read_clarity <- function(url, destfile, Web01 = FALSE, report = NULL, tidy_detail = FALSE, page_range = NULL) {
if (Web01 == TRUE) {
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
switch(report,
csv = "/reports/summary.zip",
xls = "/reports/detailxls.zip",
txt = "/reports/detailtxt.zip",
xml = "/reports/detailxml.zip"), sep = '')
}
download.file(url, destfile)
unzip(destfile)
if (tidy_detail == TRUE) {
print("This function can take a while, especially if you're importing the entire report...")
print("Please be patient!")
xls <- read_html("detail.xls")
sheetnumber <- length(html_text(html_nodes(xls, xpath = "//worksheet")))
sheets <- list()
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[(i-1)]] <- df
}
sheets
}
}
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/71871/191307/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:10)
read_clarity <- function(url, destfile, Web01 = FALSE, report = NULL, tidy_detail = FALSE, page_range = NULL) {
if (Web01 == TRUE) {
ID <- stringr::str_extract(url,"[A-Z][A-Z]/[A-Za-z]+/[0-9]+/[0-9]+")
url <- paste("http://results.enr.clarityelections.com/",ID,
switch(report,
csv = "/reports/summary.zip",
xls = "/reports/detailxls.zip",
txt = "/reports/detailtxt.zip",
xml = "/reports/detailxml.zip"), sep = '')
}
download.file(url, destfile)
unzip(destfile)
if (tidy_detail == TRUE) {
message("This function can take a while, especially if you're importing the entire report.")
message("Please be patient!")
xls <- read_html("detail.xls")
sheetnumber <- length(html_text(html_nodes(xls, xpath = "//worksheet")))
sheets <- list()
if (is.null(page_range)) {
range <- 3:sheetnumber
} else {
range <- page_range
}
for (i in range) {
rows <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row", sep = '')))
cols <- strsplit(rows[3], "(?<=[a-z]{2})(?=[A-Z])", perl = TRUE)[[1]]
cols_votes <- cols[2:length(cols)]
cols_count <- length(cols_votes)
candidate_cols_count <- cols_count - 2
everything <- html_text(html_nodes(xls, xpath = paste("//worksheet[",i,"]/table/row/cell", sep = '')))
vote_num <- na.omit(str_match(everything, "^[0-9]+"))[,1]
cell_count <- length(vote_num)
row_count <- (cell_count/cols_count) + 1
results <- matrix(data = c(cols_votes, vote_num),
nrow = row_count, ncol = cols_count,
byrow = TRUE)
# Take out the column names and vote counts
remaining <- setdiff(setdiff(everything, vote_num), cols_votes)
county_id <- which(remaining %in% cols)
counties <- remaining[county_id:length(remaining)]
remaining <- setdiff(remaining, counties)
title <- remaining[1]
remaining <- remaining[-1] %>%
fill_na() %>%
na.omit() %>%
as.character()
candidates <- length(remaining)
cols_per_candidate <- candidate_cols_count/candidates
candidate_rows <- rep(remaining,
length.out = candidate_cols_count,
each = cols_per_candidate)
df <- as.data.frame(t(results))
names(df) <- counties
df["Candidate"] <- ''
df[2:(nrow(df)-1), "Candidate"] <- candidate_rows
df <- df %>%
select(Candidate, everything()) %>%
rename("Vote Type" = !!names(.[2])) %>%
gather(3:ncol(df), key = "Locality", value = "Votes") %>%
arrange(Candidate) %>%
mutate(Race = title) %>%
select(Race, everything())
sheets[[(i-1)]] <- df
}
sheets
}
}
mytest <- read_clarity("http://results.enr.clarityelections.com/NJ/Gloucester/71871/191307/Web01/en/summary.html#", "glouc.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE, page_range = 3:10)
mytest[[1]]
mytest[[2]]
view(mytest[[2]])
View(mytest[[2]])
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip, "ga06.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip", "ga06.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE
"""
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip", "ga06.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE)
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/Web02-state/#/", "ga06.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE)
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip", "ga06.zip", Web01 = TRUE, report = "xls", tidy_detail = TRUE)
mytest <- read_clarity("https://results.enr.clarityelections.com/GA/70059/187898/reports/detailxls.zip", "ga06.zip", tidy_detail = TRUE)
mytest
?download.file
?read_html
?html_text
?html_nodes
?strsplit
?str_match
?setdiff
?which
?select
?rename
?gather
?arrange
?mutate
document()
library(devtools)
document()
View(read_clarity)
